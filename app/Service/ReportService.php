<?php
/**
 * Created by PhpStorm.
 * User: sepideh
 * Date: 2020-04-02
 * Time: 16:38
 */

namespace App\Service;


use App\Entity\Police;
use App\Entity\Report;

/**
 * Class ReportService
 * @package App\Service
 */
class ReportService extends _Service
{

    /**
     * @return mixed|void
     */
    public function init()
    {
        $this->repository = $this->em->getRepository(Report::class);
    }


    /**
     * @param array $data
     * @return mixed
     */
    public function oneBy(array $data)
    {
        return parent::oneBy($data); // TODO: Change the autogenerated stub
    }


    /**
     * @param int $id
     * @return array|mixed
     * @throws \Doctrine\DBAL\ConnectionException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function done(int $id) {

        $report = $this->oneBy(['id' => $id, 'status' => 'open']);
        if (!$report) {
            return $this->notify('Report not found OR Closed!', 404);
        }

        $police = $report->getPolice();
        $police->setStatus('free');
        $report->setStatus('close');

        $this->em->getConnection()->beginTransaction();

        try {
            $open_report = $this->repository->getOpenReport($id);

            if ($open_report) {
                $open_report->setPolice($police);
            }

            $this->em->flush();
            $this->em->getConnection()->commit();

        } catch (Exception $e) {
            $this->em->getConnection()->rollBack();
            return $this->notify('error occurred', 409);
        }

        return $report;
    }

    /**
     * @param string $license_number
     * @param string $color
     * @param string|null $national_code
     * @return Report
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function create(string $license_number, string $color, string $national_code = null) {

        $report = new Report();
        $report->setStatus('open');

        $bikeService = new BikeService($this->em);
        $bike = $bikeService->oneBy(['licenseNumber' => $license_number]);
        if(!$bike) {
            $bike = $bikeService->create($license_number, $color);
        }
        $report->setVehicle($bike);

        if ($national_code) {
            $personService = new PersonService($this->em);
            $owner = $personService->oneBy(['nationalCode' => $national_code]);
            if (!$owner) {
                $owner = $personService->create($national_code);
            }
            $report->setOwner($owner);
        }

        $free_police = $this->em->getRepository(Police::class)
                                ->getFreePolice();
        $report->setPolice($free_police);

        $this->em->persist($report);
        $this->em->flush();

        return $report;
    }
}